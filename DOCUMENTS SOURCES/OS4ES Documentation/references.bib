@inproceedings{
    10.1145/3447786.3456249,
    author = {Alex, Markuze and Vargaftik, Shay and Kupfer, Gil and Pismeny, Boris and Amit, Nadav and Morrison, Adam and Tsafrir, Dan},
    title = {Characterizing, Exploiting, and Detecting DMA Code Injection Vulnerabilities in the Presence of an IOMMU},
    year = {2021},
    isbn = {9781450383349},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3447786.3456249},
    doi = {10.1145/3447786.3456249},
    abstract = {Direct memory access (DMA) renders a system vulnerable to DMA attacks, in which I/O devices access memory regions not intended for their use. Hardware input-output memory management units (IOMMU) can be used to provide protection. However, an IOMMU cannot prevent all DMA attacks because it only restricts DMA at page-level granularity, leading to sub-page vulnerabilities.Current DMA attacks rely on simple situations in which write access to a kernel pointer is obtained due to sub-page vulnerabilities and all other attack ingredients are available and reside on the same page. We show that DMA vulnerabilities are a deep-rooted issue and it is often the kernel design that enables complex and multistage DMA attacks. This work presents a structured top-down approach to characterize, exploit, and detect them.To this end, we first categorize sub-page vulnerabilities into four types, providing insight into the structure of DMA vulnerabilities. We then identify a set of three vulnerability attributes that are sufficient to execute code injection attacks.We built analysis tools that detect these sub-page vulnerabilities and analyze the Linux kernel. We found that 72\% of the device drivers expose callback pointers, which may be overwritten by a device to hijack the kernel control flow.Aided by our tools' output, we demonstrate novel code injection attacks on the Linux kernel; we refer to these as compound attacks. All previously reported attacks are single-step, with the vulnerability attributes present in a single page. In compound attacks, the vulnerability attributes are initially incomplete. However, we demonstrate that they can be obtained by carefully exploiting standard OS behavior.},
    booktitle = {Proceedings of the Sixteenth European Conference on Computer Systems},
    pages = {395â€“409},
    numpages = {15},
    location = {Online Event, United Kingdom},
    series = {EuroSys '21}
}


@ARTICLE{9091580,
    author={Tychalas, Dimitrios and Keliris, Anastasis and Maniatakos, Michail},
    journal={IEEE Transactions on Device and Materials Reliability}, 
    title={Stealthy Information Leakage Through Peripheral Exploitation in Modern Embedded Systems}, 
    year={2020},
    volume={20},
    number={2},
    pages={308-318},
    doi = {10.1109/TDMR.2020.2994016}
}

@InProceedings{10.1007/978-3-642-37300-8_2,
author="Stewin, Patrick
and Bystrov, Iurii",
editor="Flegel, Ulrich
and Markatos, Evangelos
and Robertson, William",
title="Understanding DMA Malware",
booktitle="Detection of Intrusions and Malware, and Vulnerability Assessment",
year="2013",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="21--41",
abstract="Attackers constantly explore ways to camouflage illicit activities against computer platforms. Stealthy attacks are required in industrial espionage and also by criminals stealing banking credentials. Modern computers contain dedicated hardware such as network and graphics cards. Such devices implement independent execution environments but have direct memory access (DMA) to the host runtime memory. In this work we introduce DMA malware, i.e., malware executed on dedicated hardware to launch stealthy attacks against the host using DMA. DMA malware goes beyond the capability to control DMA hardware. We implemented DAGGER, a keylogger that attacks Linux and Windows platforms. Our evaluation confirms that DMA malware can efficiently attack kernel structures even if memory address randomization is in place. DMA malware is stealthy to a point where the host cannot detect its presense. We evaluate and discuss possible countermeasures and the (in)effectiveness of hardware extensions such as input/output memory management units.",
isbn="978-3-642-37300-8"
}

@article{10.1007/s11416-021-00413-y,
    author = {Stajnrod, Ron and Yehuda, Raz and Zaidenberg, Nezer},
    year = {2022},
    month = {09},
    pages = {},
    title = {Attacking TrustZone on devices lacking memory protection},
    volume = {18},
    journal = {Journal of Computer Virology and Hacking Techniques},
}